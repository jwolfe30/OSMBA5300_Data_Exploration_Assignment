# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "yr_mo"), " - " ) %>%
mutate(yr_mo = as.Date(yr_mo))
id_to_trends$yr_mo <- format(as.Date(id_to_trends$yr_mo), "%Y-%m")
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname, yr_mo) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, yr_mo, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$yr_mo >= '2015-09', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, yr_mo, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the median of 40700
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
reg1 <- lm(index~yr10_earnings + post_report + earning_status, data = complt)
export_summs(reg1)
effect_plot(reg1, pred = 'yr10_earnings', plot.points = TRUE)
#plot(earnings_to_trends$yr10_earnings, earnings_to_trends$std_index)
plot(complt$yr10_earnings, complt$index)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, opeid, schname, keyword, monthorweek, index)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, opeid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "yr_mo"), " - " ) %>%
mutate(yr_mo = as.Date(yr_mo))
id_to_trends$yr_mo <- format(as.Date(id_to_trends$yr_mo), "%Y-%m")
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, yr_mo, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$yr_mo >= '2015-09', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, yr_mo, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the median of 40700
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
reg1 <- lm(index~yr10_earnings + post_report + earning_status, data = complt)
View(complt)
su <- filter(complt, complt$INSTNM=='Seattle University')
View(su)
# data path
data_path <- "data/"
# read in google trend files to a single data frame
files <- dir(data_path, pattern = "trends_up_to*")
raw_sch_df<- files %>%
map(~ read.csv(file.path(data_path, .))) %>%
reduce(rbind)
# remove incomplete rows
sch_df <- raw_sch_df[complete.cases(raw_sch_df), ]
# read college scoreboard files into data frames
id_name_link <- read.csv(file = "data/id_name_link.csv")
scorecard <- read.csv(file = "data/Most+Recent+Cohorts+(Scorecard+Elements).csv")
dictionary_scorecard <- read.csv(file = "data/CollegeScorecardDataDictionary-09-08-2015.csv")
# Check if unitid is key
# check for duplicates
scorecard %>% select(UNITID) %>% duplicated() %>% max()
id_name_link %>% select(opeid) %>% duplicated() %>% max()
id_name_link %>% select(schname) %>% duplicated() %>% max()
check_dupes <- function(data, vars) {
data %>%
select(vars) %>%
duplicated() %>%
max()
}
check_dupes(id_name_link, 'unitid')
check_dupes(id_name_link, 'schname')
# generate list of duplicates in id_name_link
id_dupes <- id_name_link[duplicated(id_name_link$schname ),]
# remove duplicates in id_name_link
id_name_link <- anti_join(id_name_link, id_dupes, by = 'schname')
check_dupes(id_name_link, 'schname')
check_dupes(id_name_link, 'unitid')
# transform scorecard data to new data frame with selected and renamed rows
scoredata <- scorecard %>%
filter(PREDDEG==3) %>%
select(UNITID, OPEID, opeid6, INSTNM, md_earn_wne_p10.REPORTED.EARNINGS, PREDDEG) %>%
rename(unitid = UNITID, opeid = OPEID, yr10_earnings = md_earn_wne_p10.REPORTED.EARNINGS)
# convert earnings column to numeric, remove NAs and remove duplicates
scoredata$yr10_earnings <- as.numeric(scoredata$yr10_earnings)
scoredata <- scoredata[complete.cases(scoredata), ]
#scoredata <- scoredata$INSTNM[!duplicated(scoredata$INSTNM)]
check_dupes(scoredata, 'INSTNM')
scoredupes <- scoredata[duplicated(scoredata$INSTNM),]
scoredata <- anti_join(scoredata, scoredupes, by = 'INSTNM')
check_dupes(scoredata, 'INSTNM')
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, opeid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "yr_mo"), " - " ) %>%
mutate(yr_mo = as.Date(yr_mo))
id_to_trends$yr_mo <- format(as.Date(id_to_trends$yr_mo), "%Y-%m")
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname, yr_mo) %>%
mutate(index = mean(index)) %>%
ungroup()
View(id_to_trends)
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, yr_mo, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$yr_mo >= '2015-09', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, yr_mo, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
su <- filter(id_to_trends, id_to_trends$schname=='seattle university')
View(su)
View(complt)
#reg1 <- lm(index~yr10_earnings + , data = complt)
#export_summs(reg)
#effect_plot(reg, pred = 'yr10_earnings', plot.points = TRUE)
#plot(earnings_to_trends$yr10_earnings, earnings_to_trends$std_index)
#
plot(complt$yr10_earnings, complt$index)
plot(complt$yr10_earnings, standardize(complt$index, centerFun = mean, scaleFun = sd))
plot(complt$yr10_earnings, standardize(complt$index))
plot(complt$yr10_earnings, standardize(complt$index))
reg1 <- lm(index~yr10_earnings + , data = complt)
export_summs(reg1)
effect_plot(reg, pred = 'yr10_earnings', plot.points = TRUE)
reg1 <- lm(index~yr10_earnings, data = complt)
export_summs(reg1)
reg1 <- lm(log(index)~log(yr10_earnings), data = complt)
export_summs(reg1)
vtable(su)
su <- as_date(su$yr_mo)
su <- filter(id_to_trends, id_to_trends$schname=='seattle university')
su$yr_mo <- as_date(su$yr_mo)
su <- filter(id_to_trends, id_to_trends$schname=='seattle university')
su$yr_mo <- as_date(`su$yr_mo`)
testdate <- as.Date(su$yr_mo)
su$yr_mo <- format(as.Date(su$yr_mo), "%Y-%m")
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, opeid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "yr_mo"), " - " ) %>%
mutate(yr_mo = as.Date(yr_mo))
id_to_trends$yr_mo <- format(as.Date(id_to_trends$yr_mo), "%Y-%m-%d")
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname, yr_mo) %>%
mutate(index = mean(index)) %>%
ungroup()
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, yr_mo, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$yr_mo >= '2015-09-01', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, yr_mo, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
vtable(complt)
su <- filter(id_to_trends, id_to_trends$schname=='seattle university')
reg1 <- lm(log(index)~log(yr10_earnings), data = complt)
reg1 <- lm(index~log(yr10_earnings), data = complt)
export_summs(reg1)
effect_plot(reg1, pred = 'yr10_earnings', plot.points = TRUE)
plot(earnings_to_trends$yr10_earnings, earnings_to_trends$index)
# Load relevant libraries
library(tidyverse)
library(tidylog)
library(vtable)
library(jtools)
library(car)
library(purrr)
library(lubridate)
# data path
data_path <- "data/"
# read in google trend files to a single data frame
files <- dir(data_path, pattern = "trends_up_to*")
raw_sch_df<- files %>%
map(~ read.csv(file.path(data_path, .))) %>%
reduce(rbind)
# remove incomplete rows
sch_df <- raw_sch_df[complete.cases(raw_sch_df), ]
View(sch_df)
# read college scoreboard files into data frames
id_name_link <- read.csv(file = "data/id_name_link.csv")
scorecard <- read.csv(file = "data/Most+Recent+Cohorts+(Scorecard+Elements).csv")
dictionary_scorecard <- read.csv(file = "data/CollegeScorecardDataDictionary-09-08-2015.csv")
# Check if unitid is key
# check for duplicates
scorecard %>% select(UNITID) %>% duplicated() %>% max()
id_name_link %>% select(opeid) %>% duplicated() %>% max()
id_name_link %>% select(schname) %>% duplicated() %>% max()
id_name_link %>% select(unitid) %>% duplicated() %>% max()
id_name_link %>% select(opeid) %>% duplicated() %>% max()
id_name_link %>% select(schname) %>% duplicated() %>% max()
check_dupes <- function(data, vars) {
data %>%
select(vars) %>%
duplicated() %>%
max()
}
check_dupes(id_name_link, 'unitid')
check_dupes(id_name_link, 'schname')
# generate list of duplicates in id_name_link
id_dupes <- id_name_link[duplicated(id_name_link$schname ),]
# remove duplicates in id_name_link
id_name_link <- anti_join(id_name_link, id_dupes, by = 'schname')
check_dupes(id_name_link, 'schname')
check_dupes(id_name_link, 'unitid')
# transform scorecard data to new data frame with selected and renamed rows
scoredata <- scorecard %>%
filter(PREDDEG==3) %>%
select(UNITID, OPEID, opeid6, INSTNM, md_earn_wne_p10.REPORTED.EARNINGS, PREDDEG) %>%
rename(unitid = UNITID, opeid = OPEID, yr10_earnings = md_earn_wne_p10.REPORTED.EARNINGS)
# transform scorecard data to new data frame with selected and renamed rows
scoredata <- scorecard %>%
filter(PREDDEG==3) %>%
select(UNITID, INSTNM, md_earn_wne_p10.REPORTED.EARNINGS, PREDDEG) %>%
rename(unitid = UNITID, yr10_earnings = md_earn_wne_p10.REPORTED.EARNINGS)
# convert earnings column to numeric, remove NAs and remove duplicates
scoredata$yr10_earnings <- as.numeric(scoredata$yr10_earnings)
scoredata <- scoredata[complete.cases(scoredata), ]
check_dupes(scoredata, 'INSTNM')
scoredupes <- scoredata[duplicated(scoredata$INSTNM),]
scoredata <- anti_join(scoredata, scoredupes, by = 'INSTNM')
check_dupes(scoredata, 'INSTNM')
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, opeid, schname, keyword, monthorweek, index)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "date"), " - " ) %>%
mutate(date = as.Date(date))
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname, date) %>%
mutate(index = mean(index)) %>%
ungroup()
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, date, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$date >= '2015-09-01', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, date, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
plot2 <- complt %>% filter(earning_status==1)
plot(plot2$yr10_earnings, plot2$index)
plot3 <- complt %>%  filter(earning_status==0)
plot(plot3$yr10_earnings, plot3$index)
reg2 <- lm(index~yr10_earnings, data = complt)
export_summs(reg2)
reg1 <- lm(index~yr10_earnings, data = complt)
vtable(complt)
export_summs(reg1)
complt %>% group_by(post_report, INSTNM, yr10_earnings) %>%
summarize(mean(index))
complt %>% group_by(post_report, INSTNM, yr10_earnings) %>%
summarize(mean(index)) %>%
ggplot(aes(x = yr10_earnings, y = mean(index),
color = post_report)) + geom_point() + geom_smooth(method = 1m)
complt %>% group_by(post_report, INSTNM, yr10_earnings) %>%
summarize(mean(index)) %>%
ggplot(aes(x = yr10_earnings, y = mean(index),
color = post_report)) + geom_point() + geom_smooth(method = lm)
complt %>% group_by(post_report, INSTNM, yr10_earnings) %>%
summarize(mean(index)) %>%
ggplot(aes(x = yr10_earnings, y = mean(index),
color = post_report)) + geom_point()
complt %>% group_by(post_report, INSTNM, yr10_earnings) %>%
summarize(index) %>%
ggplot(aes(x = yr10_earnings, y = mean(index),
color = post_report)) + geom_point()
test <- complt %>% filter(yr10_earnings >= 35100 |  yr10_earnings <= 47800)
View(test)
test <- complt %>% filter(yr10_earnings >= 35100)
test <- complt %>% filter(yr10_earnings >= 35100, yr10_earnings <= 47800)
lm(index~yr10_earnings, data = test)
reg3 <- lm(index~yr10_earnings, data = test)
export_summs(reg3)
effect_plot(reg3, pred = 'yr10_earnings', plot.points = TRUE)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = ((index - mean(index))/sd(index))) %>%
ungroup()
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "date"), " - " ) %>%
mutate(date = as.Date(date))
id_to_trends$date <- format(as.Date(id_to_trends$date), "%Y-%m-%d")
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, date, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$date >= '2015-09-01', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, date, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
reg1 <- lm(index~yr10_earnings, data = complt)
export_summs(reg1)
effect_plot(reg1, pred = 'yr10_earnings', plot.points = TRUE)
cor(complt$index,complt$yr10_earnings)
cor.test(complt$index,complt$yr10_earnings)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = mean(index))
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "date"), " - " ) %>%
mutate(date = as.Date(date))
id_to_trends$date <- format(as.Date(id_to_trends$date), "%Y-%m-%d")
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, date, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$date >= '2015-09-01', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, date, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
reg1 <- lm(index~yr10_earnings, data = complt)
export_summs(reg1)
effect_plot(reg1, pred = 'yr10_earnings', plot.points = TRUE)
View(id_to_trends)
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# remove duplicates in id_name_link
id_name_link <- anti_join(id_name_link, id_dupes, by = 'schname')
check_dupes(id_name_link, 'schname')
check_dupes(id_name_link, 'unitid')
# transform scorecard data to new data frame with selected and renamed rows
scoredata <- scorecard %>%
filter(PREDDEG==3) %>%
select(UNITID, INSTNM, md_earn_wne_p10.REPORTED.EARNINGS, PREDDEG) %>%
rename(unitid = UNITID, yr10_earnings = md_earn_wne_p10.REPORTED.EARNINGS)
# convert earnings column to numeric, remove NAs and remove duplicates
scoredata$yr10_earnings <- as.numeric(scoredata$yr10_earnings)
scoredata <- scoredata[complete.cases(scoredata), ]
check_dupes(scoredata, 'INSTNM')
scoredupes <- scoredata[duplicated(scoredata$INSTNM),]
scoredata <- anti_join(scoredata, scoredupes, by = 'INSTNM')
check_dupes(scoredata, 'INSTNM')
# merge id data frame to trend dataframe, keeping only schools with trend data
id_to_trends <- merge(sch_df, id_name_link, by = "schname", all.x = TRUE, all.y = FALSE) %>%
select(unitid, schname, keyword, monthorweek, index)
# standardize keyword index for each institution for later comparison
id_to_trends <- id_to_trends %>% group_by(schname, keyword) %>%
mutate(index = (index - mean(index) / sd(index)))
# break down the date variable by taking the end date of each weekly data collection,
# combining all weeks into monthly indicies that create an average monthly index for all
id_to_trends <- id_to_trends %>% separate(monthorweek, c(NA, "date"), " - " ) %>%
mutate(date = as.Date(date))
id_to_trends$date <- format(as.Date(id_to_trends$date), "%Y-%m-%d")
# average monthly index for each school
id_to_trends <- id_to_trends %>% group_by(schname, date) %>%
mutate(index = mean(index)) %>%
ungroup()
# removes unused variables in id_to_trends and remove duplicate months
# resulting df has a standardized index for each month for each school
id_to_trends <- id_to_trends %>% select(unitid, schname, date, index)
id_to_trends <- unique(id_to_trends)
# create college scorecard existance dummy variable for pre and post september 2015 for
# index analysis
id_to_trends$post_report <- if_else(id_to_trends$date >= '2015-09-01', 1, 0)
id_to_trends <- id_to_trends %>% mutate(post_report = factor(post_report))
# merge scorecard data to the trend data based on unitid
# Keeping only the scorecard data we have trend data for and removing NAs
earnings_to_trends <- merge(id_to_trends, scoredata, by = "unitid", all.x = TRUE, all.y = FALSE) %>%
select(unitid, INSTNM, date, index, post_report, yr10_earnings)
earnings_to_trends <- earnings_to_trends[complete.cases(earnings_to_trends), ]
# create dummy variable. 0 for low earning schools and 1 for high earning schools
# earning status is based on the descriptive statistics of earnings for all schools
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 11800   35100   40700   42159   47800  166200
# low earning is based on schools falling bellow the
desc_stats <- summary(scoredata$yr10_earnings)
earnings_to_trends$earning_status <- ifelse(earnings_to_trends$yr10_earnings >=40700, 1, 0)
earnings_to_trends <- earnings_to_trends %>% mutate(earning_status = factor(earning_status))
complt <- earnings_to_trends
